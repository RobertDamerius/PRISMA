#pragma once


#include <Common.hpp>


class GLPerformanceCounter {
    public:
        /**
         * @brief Construct a new GL performance counter.
         * @details The actual query counter has to be generated by @ref Generate.
         */
        GLPerformanceCounter(): q(0) {}

        /**
         * @brief Generate the query counter object.
         */
        void Generate(void){
            DEBUG_GLCHECK( glGenQueries(1, &q); );
        }

        /**
         * @brief Delete the query counter object.
         */
        void Delete(void){
            DEBUG_GLCHECK( glDeleteQueries(1, &q); );
            q = 0;
        }

        /**
         * @brief Begin the query counter measurement.
         */
        void BeginQuery(void){
            DEBUG_GLCHECK( glBeginQuery(GL_TIME_ELAPSED, q); );
        }

        /**
         * @brief End the query counter measurement and calculate the elapsed time to the @ref BeginQuery call.
         * @return Elapsed time in seconds.
         */
        double EndQuery(void){
            GLuint64 elapsedNanoseconds;
            DEBUG_GLCHECK( glEndQuery(GL_TIME_ELAPSED); );
            DEBUG_GLCHECK( glGetQueryObjectui64v(q, GL_QUERY_RESULT, &elapsedNanoseconds); );
            return 1.0e-9 * static_cast<double>(elapsedNanoseconds);
        }

    private:
        GLuint q;   // Internal query counter object.
};
