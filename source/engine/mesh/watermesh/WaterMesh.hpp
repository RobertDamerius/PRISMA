#pragma once


#include <Common.hpp>
#include <AABB.hpp>


#pragma pack(push, 1)
struct WaterMeshVertex {
    GLfloat position[2];   // 2D position vector.
};
#pragma pack(pop)


/**
 * @brief Represents a water mesh. The mesh data can be updated online.
 */
class WaterMesh {
    public:
        /**
         * @brief Construct a new water mesh.
         */
        WaterMesh();

        /**
         * @brief Generate the GL content for this mesh.
         */
        void Generate(void);

        /**
         * @brief Delete the GL content of this mesh.
         */
        void Delete(void);

        /**
         * @brief Update the mesh data.
         * @param[in] vertices The vertices to be used as mesh data.
         * @param[in] indices The array of zero-based indices to vertices representing triangles.
         * @details The mesh has to be generated by @ref Generate before calling this member function!
         */
        void UpdateMeshData(const std::vector<WaterMeshVertex>& vertices, const std::vector<GLuint>& indices);

        /**
         * @brief Clear the current mesh data.
         * @details The mesh has to be generated by @ref Generate before calling this member function!
         */
        void ClearMeshData(void);

        /**
         * @brief Draw the triangles of the water mesh.
         */
        void Draw(void);

    private:
        GLuint vao;                   // VAO for mesh data.
        GLuint vbo;                   // VBO for mesh data.
        GLuint ebo;                   // EBO for mesh data.
        GLsizei numIndices;           // The number of indices to be rendered.
        size_t bufferSizeVertices;    // Current buffer size for vertices.
        size_t bufferSizeIndices;     // Current buffer size for indices.
};

