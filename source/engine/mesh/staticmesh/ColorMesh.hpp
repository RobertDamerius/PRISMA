#pragma once


#include <Common.hpp>
#include <MeshBase.hpp>
#include <AABB.hpp>


#pragma pack(push, 1)
struct ColorMeshVertex {
    GLfloat position[3];   // 3D position vector.
    GLfloat normal[3];     // 3D normal vector.
    GLfloat color[3];      // 3D color vector (R, G, B).
};
#pragma pack(pop)


/**
 * @brief Represents a mesh where each vertex has a color attribute.
 */
class ColorMesh: public MeshBase {
    public:
        /**
         * @brief Create a polymesh object.
         */
        ColorMesh();

        /**
         * @brief Generate GL content (vao, vbo, ebo) and free memory.
         * @return True if success, false otherwise. If this mesh has already been generated, false is returned.
         */
        bool Generate(void);

        /**
         * @brief Delete all GL content that was generated by the @ref Generate member function.
         */
        void Delete(void);

        /**
         * @brief Draw all triangles of the mesh.
         */
        void Draw(void);

        /**
         * @brief Get the axis-aligned bounding box for all mesh vertices.
         */
        AABB GetAABBOfVertices(void);

        /**
         * @brief Read mesh data from ply file.
         * @param[in] filename Filename of the ply file.
         * @return True if success, false otherwise.
         */
        bool ReadFromFile(std::string filename);

    private:
        GLuint vao;                              // The vertex array object.
        GLuint vbo;                              // The vertex buffer object.
        GLuint ebo;                              // The element buffer object.
        std::vector<ColorMeshVertex> vertices;   // List of vertices for this mesh.
        std::vector<GLuint> indices;             // List of indices to vertices that describe triangles of the mesh.
        GLsizei numIndices;                      // The number of indices to draw. This value is set by @ref Generate.
        AABB aabbVertices;                       // The axis-aligned bounding box containing all @ref vertices.

        struct PlyElement {
            std::string name;
            uint32_t number;
            std::vector<std::string> propertyNames;
        };
        std::vector<PlyElement> elements;   // List of elements specified in the header of a ply file.

        /**
         * @brief Parse the ply header.
         * @param[in] file The open file from which to read.
         * @return True if success, false otherwise.
         */
        bool ParsePlyHeader(std::ifstream& file);

        /**
         * @brief Parse the ply data.
         * @param[in] file The open file from which to read.
         * @return True if success, false otherwise.
         */
        bool ParsePlyData(std::ifstream& file);

        /**
         * @brief Read the next line from the file.
         * @param[in] file The open file from which to read.
         * @return The line exluding <CR> and <LF>.
         */
        std::string ReadNextLine(std::ifstream& file);

        /**
         * @brief Get the index of a specific property name from a list of property names.
         * @param[in] propertyNames The list of property names.
         * @param[in] name Specific property name to be searched for.
         * @return Index of the propertyNames container or -1 if that name does not exist.
         */
        int32_t GetPropertyIndex(const std::vector<std::string>& propertyNames, std::string name);

        /**
         * @brief Get a vertex with default values.
         * @return Vertex for the color mesh.
         */
        ColorMeshVertex GetDefaultVertex(void);

        /**
         * @brief Update the @ref aabbVertices based on @ref vertices.
         */
        void UpdateAABB(void);

        /**
         * @brief Ensure that the normal vector is indeed a normalized vector.
         * @param[inout] vertex The vertex for which to ensure the correct normal vector.
         */
        void EnsureCorrectNormal(ColorMeshVertex& vertex);

        /**
         * @brief Convert the color of a vertex from sRGB to linear RGB.
         * @param[inout] vertex The vertex for which to convert the color space.
         */
        void SRGBToLinearRGB(ColorMeshVertex& vertex);
};

